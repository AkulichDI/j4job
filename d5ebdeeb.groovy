/**
 * NAUMEN SERVICE DESK v8.3 - PRODUCTION FINAL
 * –ú–∞—Å—Å–æ–≤–æ–µ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á + –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
 * 
 * –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
 * ‚úÖ 6 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞ (–Ω–∞–π–¥—ë—Ç –õ–Æ–ë–û–ì–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
 * ‚úÖ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –û–¢–ö–†–´–¢–´–• –∑–∞–¥–∞—á –Ω–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
 * ‚úÖ –ó–ê–ö–†–´–¢–ò–ï –∑–∞–¥–∞—á –≥–¥–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π = —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ò —Å—Ç–∞—Ç—É—Å = "—Ä–∞–∑—Ä–µ—à–µ–Ω"
 * ‚úÖ –°–º–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞ notLicensed
 * ‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 * ‚úÖ DRY_RUN —Ä–µ–∂–∏–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * ‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (5-50 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
 * ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * 
 * –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:
 * 1. CSV_TEXT - —Å–ø–∏—Å–æ–∫ –§–ò–û (–æ–¥–∏–Ω –Ω–∞ —Å—Ç—Ä–æ–∫—É)
 * 2. DRY_RUN = true (–í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å —Ç–µ—Å—Ç–∞!)
 * 3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏
 * 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏
 * 5. DRY_RUN = false ‚Üí –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ
 */

import com.naumen.core.shared.dto.IDto
import com.naumen.core.server.query.QueryPool

//==============================================================================
// ‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
//==============================================================================

// üî¥ –í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –ù–ê–ß–ò–ù–ê–ô–¢–ï –° TRUE!
boolean DRY_RUN = true

// CSV —Å –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–æ–¥–∏–Ω –Ω–∞ —Å—Ç—Ä–æ–∫—É, —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Naumen)
String CSV_TEXT = '''–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á
–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á
–ò–≤–∞–Ω—ë–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
–ò–≤–∞–Ω–æ–≤-–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω
–§–µ–¥–æ—Ä–æ–≤ –§–µ–¥–æ—Ä –§–µ–¥–æ—Ä–æ–≤–∏—á'''

// –¶–µ–ª–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á
List<String> OU_TARGET_FIELDS = ['executor', 'secondaryResponsible', 'responsible']

// –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ "—Ä–∞–∑—Ä–µ—à–µ–Ω" (–¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á)
List<String> RAZRESHYONNYE_STATUSES = ['razreshyonnye', '—Ä–∞–∑—Ä–µ—à–µ–Ω', 'resolved', 'approved', 'permitted']

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
int PARALLEL_THREADS = 5          // –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 5 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
int SLEEP_MS = 500                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ (–∏–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏)
int TASK_LIMIT_PER_EMPLOYEE = 500 // –ú–∞–∫—Å –∑–∞–¥–∞—á –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
int GLOBAL_LIMIT_CHANGES = 20000  // –û–±—â–∏–π –ª–∏–º–∏—Ç –ø—Ä–∞–≤–æ–∫
int TIMEOUT_SECONDS = 1800        // 30 –º–∏–Ω—É—Ç –¥–ª—è –≤—Å–µ–≥–æ

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
int SEARCH_ATTEMPTS = 6           // 6 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
int QUERY_TIMEOUT = 60000         // Query timeout –≤ –º—Å

//==============================================================================
// üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
//==============================================================================

class Stats {
    int totalEmployees = 0
    int foundEmployees = 0
    int notFoundEmployees = 0
    int tasksReassigned = 0
    int tasksClosed = 0
    int tasksClosedAsResolved = 0  // –ó–∞–∫—Ä—ã—Ç–æ "—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ"
    int tasksClosed_SkipReason = 0 // –ù–µ —Ç—Ä–æ–≥–∞–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ
    int licensesChanged = 0
    int archived = 0
    int errors = 0
    long startTime = 0
    long endTime = 0
    List<String> errorMessages = []
    
    String getReport() {
        long duration = (endTime - startTime) / 1000
        return """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë              üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ (v8.3)                        ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:          $totalEmployees
‚ïë –ù–∞–π–¥–µ–Ω–æ:                    $foundEmployees ‚úÖ
‚ïë –ù–µ –Ω–∞–π–¥–µ–Ω–æ:                 $notFoundEmployees ‚ùå
‚ïë‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïë
‚ïë –ó–∞–¥–∞—á –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ:        $tasksReassigned
‚ïë –ó–∞–¥–∞—á –∑–∞–∫—Ä—ã—Ç–æ (—Ä–∞–∑—Ä–µ—à—ë–Ω):   $tasksClosedAsResolved
‚ïë –ó–∞–¥–∞—á –Ω–µ —Ç—Ä–æ–≥–∞–ª–∏ (–∑–∞–∫—Ä—ã—Ç–æ): $tasksClosed_SkipReason ‚úÖ
‚ïë –õ–∏—Ü–µ–Ω–∑–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ:          $licensesChanged
‚ïë –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:               $archived
‚ïë‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïë
‚ïë –û—à–∏–±–æ–∫:                     $errors
‚ïë –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:           ${duration} —Å–µ–∫
‚ïë –†–µ–∂–∏–º:                      ${DRY_RUN ? 'üß™ DRY_RUN' : '‚ö° PRODUCTION'}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
${errors > 0 ? '‚ùå –û–®–ò–ë–ö–ò:\n' + errorMessages.join('\n') : ''}
"""
    }
}

Stats stats = new Stats()
stats.startTime = System.currentTimeMillis()

//==============================================================================
// üîç –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê
//==============================================================================

/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ 6 –ø–æ–ø—ã—Ç–æ–∫
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
 */
IDto findEmployeeWithAttempts(String fullName) {
    if (!fullName?.trim()) return null
    
    String original = fullName.trim()
    String normalized = normalizeString(original)
    
    // –†–∞–∑–±–∏—Ä–∞–µ–º –§–ò–û
    List<String> parts = original.split('\\s+')
    String lastName = parts.size() > 0 ? parts[0] : ''
    String firstName = parts.size() > 1 ? parts[1] : ''
    String patronymic = parts.size() > 2 ? parts[2] : ''
    
    List<String> lastNameNorm = lastName ? [normalizeString(lastName)] : []
    List<String> firstNameNorm = firstName ? [normalizeString(firstName)] : []
    List<String> patronymicNorm = patronymic ? [normalizeString(patronymic)] : []
    
    // 6 –ü–û–ü–´–¢–û–ö –ü–û–ò–°–ö–ê
    
    // –ü–û–ü–´–¢–ö–ê 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Å–µ–≥–æ –§–ò–û (–∫–∞–∫ –µ—Å—Ç—å)
    String query1 = "name = '${original.replace("'", "\\'")}'"
    IDto result = queryPool(query1)
    if (result) return result
    
    // –ü–û–ü–´–¢–ö–ê 2: LIKE –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∫–∞–∫ –µ—Å—Ç—å)
    String query2 = "name LIKE '%${original.replace("'", "\\'")}%'"
    result = queryPool(query2)
    if (result) return result
    
    // –ü–û–ü–´–¢–ö–ê 3: –ü–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª—è–º (–∫–∞–∫ –µ—Å—Ç—å)
    if (lastName) {
        String query3 = "lastName = '${lastName.replace("'", "\\'")}'"
        if (firstName) {
            query3 += " AND firstName = '${firstName.replace("'", "\\'")}'"
        }
        result = queryPool(query3)
        if (result) return result
    }
    
    // –ü–û–ü–´–¢–ö–ê 4: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –° –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    String query4 = "name = '${normalized.replace("'", "\\'")}'"
    result = queryPool(query4)
    if (result) return result
    
    // –ü–û–ü–´–¢–ö–ê 5: LIKE –° –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    String query5 = "name LIKE '%${normalized.replace("'", "\\'")}%'"
    result = queryPool(query5)
    if (result) return result
    
    // –ü–û–ü–´–¢–ö–ê 6: –ü–æ –ø–æ–ª—è–º –° –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    if (lastNameNorm) {
        String query6 = "lastName = '${lastNameNorm[0].replace("'", "\\'")}'"
        if (firstNameNorm) {
            query6 += " AND firstName = '${firstNameNorm[0].replace("'", "\\'")}'"
        }
        result = queryPool(query6)
        if (result) return result
    }
    
    return null
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ (—ë‚Üí–µ, —É–¥–∞–ª–µ–Ω–∏–µ –¥–µ—Ñ–∏—Å–æ–≤)
 */
String normalizeString(String str) {
    if (!str) return ''
    return str
        .replace('—ë', '–µ')
        .replace('–Å', '–ï')
        .replace('-', ' ')
        .toLowerCase()
}

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å query —Å —Ç–∞–π–º–∞—É—Ç–æ–º
 */
IDto queryPool(String query) {
    try {
        def result = QueryPool.query(query)
            .setMaxResults(1)
            .setQueryTimeout(QUERY_TIMEOUT)
            .execute()
        return result?.list()?.size() > 0 ? result.list()[0] : null
    } catch (Exception e) {
        return null
    }
}

/**
 * –ù–∞–π—Ç–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–í–°–ï —Å—Ç–∞—Ç—É—Å—ã –∫—Ä–æ–º–µ closed/completed)
 */
List<IDto> findOpenTasks(IDto employee) {
    if (!employee?.UUID) return []
    
    String empUUID = employee.UUID.toString()
    
    try {
        // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –≥–¥–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∫–∞–∑–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –ò–õ–ò –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º
        String query = """
            (executor = '${empUUID}' OR 
             secondaryResponsible = '${empUUID}' OR 
             responsible = '${empUUID}')
            AND status != 'closed'
            AND status != 'completed'
        """
        
        def result = QueryPool.query(query)
            .setMaxResults(TASK_LIMIT_PER_EMPLOYEE)
            .setQueryTimeout(QUERY_TIMEOUT)
            .execute()
        
        return result?.list() ?: []
    } catch (Exception e) {
        stats.errors++
        stats.errorMessages.add("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è ${employee.title}: ${e.message}")
        return []
    }
}

/**
 * –î–æ–ª–∂–Ω—ã –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É (–∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
 */
boolean shouldSkipTask(IDto task) {
    String status = task?.status?.code?.toString()?.toLowerCase() ?: ''
    return status.contains('closed') || status.contains('complete')
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ "—Ä–∞–∑—Ä–µ—à–µ–Ω"
 */
boolean isTaskResolved(IDto task) {
    String statusCode = task?.status?.code?.toString()?.toLowerCase() ?: ''
    return RAZRESHYONNYE_STATUSES.any { statusCode.contains(it.toLowerCase()) }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
IDto getEmployeeOU(IDto employee) {
    try {
        return employee.parent?.deref()
    } catch (Exception e) {
        return null
    }
}

//==============================================================================
// üíæ –û–ü–ï–†–ê–¶–ò–ò –ù–ê –ó–ê–î–ê–ß–ê–• –ò –°–û–¢–†–£–î–ù–ò–ö–ï
//==============================================================================

/**
 * –ù–û–í–û–ï: –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏ –≥–¥–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π = —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏ —Å—Ç–∞—Ç—É—Å = "—Ä–∞–∑—Ä–µ—à–µ–Ω"
 */
void closeResolvedTasksWhereResponsible(IDto employee) {
    if (!employee?.UUID) return
    
    String empUUID = employee.UUID.toString()
    
    try {
        // –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ –≥–¥–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–´–ô –∏ —Å—Ç–∞—Ç—É—Å –†–ê–ó–†–ï–®–Å–ù
        List<IDto> tasksToClose = []
        
        // –ò—â–µ–º –∑–∞–¥–∞—á–∏ —Å –ª—é–±—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (–∫—Ä–æ–º–µ fully closed)
        String query = """
            responsible = '${empUUID}'
            AND status != 'closed'
            AND status != 'completed'
        """
        
        def result = QueryPool.query(query)
            .setMaxResults(TASK_LIMIT_PER_EMPLOYEE)
            .setQueryTimeout(QUERY_TIMEOUT)
            .execute()
        
        List<IDto> allResponsibleTasks = result?.list() ?: []
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É "—Ä–∞–∑—Ä–µ—à–µ–Ω"
        allResponsibleTasks.each { task ->
            if (isTaskResolved(task)) {
                tasksToClose.add(task)
            }
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasksToClose.each { task ->
            if (stats.tasksClosed >= GLOBAL_LIMIT_CHANGES) return
            
            try {
                if (!DRY_RUN) {
                    task.status = new com.naumen.core.shared.dto.DtoEntity('closed')
                    // –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:
                    try {
                        task.status.code = 'closed'
                    } catch (Exception e) {
                        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç—Ä–æ–∫—É
                        task.status = 'closed'
                    }
                    task.save()
                    sleep(SLEEP_MS)
                }
                
                stats.tasksClosedAsResolved++
                println "  ‚úÖ –ó–∞–∫—Ä—ã—Ç–æ –∑–∞–¥–∞—á—É (–±—ã–ª–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞): ${task.UUID}"
            } catch (Exception e) {
                stats.errors++
                stats.errorMessages.add("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏ ${task.UUID}: ${e.message}")
            }
        }
        
    } catch (Exception e) {
        stats.errors++
        stats.errorMessages.add("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è ${employee.title}: ${e.message}")
    }
}

/**
 * –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
 */
void reassignTasks(IDto employee, IDto targetOU) {
    if (!employee?.UUID || !targetOU?.UUID) return
    
    List<IDto> tasks = findOpenTasks(employee)
    
    tasks.each { task ->
        if (shouldSkipTask(task)) {
            stats.tasksClosed_SkipReason++
            return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ
        }
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∏—Ö –∑–∞–∫—Ä–æ–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ)
        if (isTaskResolved(task)) {
            return
        }
        
        if (stats.tasksReassigned >= GLOBAL_LIMIT_CHANGES) return
        
        try {
            OU_TARGET_FIELDS.each { field ->
                if (task.metaClass.hasProperty(task, field)) {
                    if (!DRY_RUN) {
                        task."$field" = targetOU
                    }
                }
            }
            
            if (!DRY_RUN) {
                task.save()
                sleep(SLEEP_MS)
            }
            
            stats.tasksReassigned++
        } catch (Exception e) {
            stats.errors++
            stats.errorMessages.add("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ${task.UUID}: ${e.message}")
        }
    }
}

/**
 * –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é
 */
void changeLicense(IDto employee) {
    if (!employee?.UUID) return
    
    try {
        if (!DRY_RUN) {
            employee.licenseName = 'notLicensed'
            employee.save()
            sleep(SLEEP_MS)
        }
        stats.licensesChanged++
    } catch (Exception e) {
        stats.errors++
        stats.errorMessages.add("‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ª–∏—Ü–µ–Ω–∑–∏–∏ ${employee.title}: ${e.message}")
    }
}

/**
 * –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (3 —Å–ø–æ—Å–æ–±–∞)
 */
void archiveEmployee(IDto employee) {
    if (!employee?.UUID) return
    
    boolean archived = false
    
    // –°–ø–æ—Å–æ–± 1: —á–µ—Ä–µ–∑ –ø–æ–ª–µ inactive
    try {
        if (!DRY_RUN) {
            employee.inactive = true
            employee.save()
            sleep(SLEEP_MS)
        }
        stats.archived++
        archived = true
        return
    } catch (Exception e) {
        // –ü—Ä–æ–±—É–µ–º —Å–ø–æ—Å–æ–± 2
    }
    
    // –°–ø–æ—Å–æ–± 2: —á–µ—Ä–µ–∑ –ø–æ–ª–µ archived
    try {
        if (!DRY_RUN) {
            employee.archived = true
            employee.save()
            sleep(SLEEP_MS)
        }
        stats.archived++
        archived = true
        return
    } catch (Exception e) {
        // –ü—Ä–æ–±—É–µ–º —Å–ø–æ—Å–æ–± 3
    }
    
    // –°–ø–æ—Å–æ–± 3: —á–µ—Ä–µ–∑ –ø–æ–ª–µ state
    try {
        if (!DRY_RUN) {
            employee.state = 'archived'
            employee.save()
            sleep(SLEEP_MS)
        }
        stats.archived++
        archived = true
        return
    } catch (Exception e) {
        stats.errors++
        stats.errorMessages.add("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å ${employee.title}: ${e.message}")
    }
}

//==============================================================================
// ‚ö° –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê
//==============================================================================

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
 */
void processEmployee(String fullName) {
    stats.totalEmployees++
    
    // –ü–æ–∏—Å–∫ —Å 6 –ø–æ–ø—ã—Ç–∫–∞–º–∏
    println "üîç –ò—â—É: $fullName"
    IDto employee = findEmployeeWithAttempts(fullName)
    
    if (!employee) {
        stats.notFoundEmployees++
        println "‚ùå –ù–ï –ù–ê–ô–î–ï–ù: $fullName"
        stats.errorMessages.add("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: $fullName")
        return
    }
    
    stats.foundEmployees++
    println "‚úÖ –ù–ê–ô–î–ï–ù: ${employee.title}"
    
    // –ù–û–í–û–ï: –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≥–¥–µ –æ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
    println "  üîç –ò—â—É —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≥–¥–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π..."
    closeResolvedTasksWhereResponsible(employee)
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
    IDto targetOU = getEmployeeOU(employee)
    if (!targetOU) {
        stats.errors++
        println "‚ùå –ù–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —É ${employee.title}"
        stats.errorMessages.add("‚ùå –ù–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: ${employee.title}")
        return
    }
    
    println "üìÇ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: ${targetOU.title}"
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (stats.tasksReassigned < GLOBAL_LIMIT_CHANGES) {
        reassignTasks(employee, targetOU)
    }
    
    changeLicense(employee)
    archiveEmployee(employee)
    
    println "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: $fullName\n"
}

//==============================================================================
// üöÄ –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
//==============================================================================

try {
    println """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     üöÄ NAUMEN SERVICE DESK v8.3 STARTING                      ‚ïë
‚ïë     –ù–æ–≤–æ–µ: –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á + –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ        ‚ïë
‚ïë     –†–µ–∂–∏–º: ${DRY_RUN ? 'üß™ DRY_RUN (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ—Å—Ç)' : '‚ö° PRODUCTION (—Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)'}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    
    if (DRY_RUN) {
        println """
‚ö†Ô∏è  –†–ï–ñ–ò–ú DRY_RUN –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!
    –ù–∏–∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.
    –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏.
    
    –î–õ–Ø –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –†–ï–ê–õ–¨–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô:
    1. –£—Å—Ç–∞–Ω–æ–≤–∏ DRY_RUN = false
    2. –ó–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç –µ—â–µ —Ä–∞–∑
"""
    }
    
    // –†–∞–∑–±–∏—Ä–∞–µ–º CSV
    List<String> employees = CSV_TEXT
        .split('\n')
        .collect { it.trim() }
        .findAll { it && !it.startsWith('#') }
    
    println "üìã –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${employees.size()} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    def threadPool = java.util.concurrent.Executors.newFixedThreadPool(PARALLEL_THREADS)
    List<java.util.concurrent.Future<?>> futures = []
    
    employees.each { empName ->
        def future = threadPool.submit({
            try {
                processEmployee(empName)
            } catch (Exception e) {
                stats.errors++
                stats.errorMessages.add("‚ùå CRITICAL ERROR –¥–ª—è $empName: ${e.message}")
                e.printStackTrace()
            }
        } as Runnable)
        futures.add(future)
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    futures.each { future ->
        try {
            future.get(TIMEOUT_SECONDS, java.util.concurrent.TimeUnit.SECONDS)
        } catch (java.util.concurrent.TimeoutException e) {
            stats.errors++
            stats.errorMessages.add("‚ùå TIMEOUT –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ (${TIMEOUT_SECONDS}—Å)")
            future.cancel(true)
        }
    }
    
    threadPool.shutdown()
    
    stats.endTime = System.currentTimeMillis()
    
    println stats.getReport()
    
} catch (Exception e) {
    stats.errors++
    stats.errorMessages.add("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${e.message}")
    println "‚ùå –û–®–ò–ë–ö–ê: ${e.message}"
    e.printStackTrace()
}

println "‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
