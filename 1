/* ‚ïê‚ïê‚ïê‚ïê‚ïê –í–°–¢–ê–í–¨–¢–ï CSV –ó–î–ï–°–¨ ‚ïê‚ïê‚ïê‚ïê‚ïê */
def CSV_TEXT = $/
–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
–ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á
/$

// ... [–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, splitCsv, buildFioList, normalizeFio, toObj]

def findEmployeeByFio = { String fioInput ->
    // ... [–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]
}

def getStatusInfo = { obj ->
    // ... [–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –∏—â–µ–º –ø–æ–ª—è status/state/stage]
}

def getEmployeeDepartment = { emp ->
    try {
        if (!emp) return null
        def parent = emp.parent
        if (!parent) return null
        def uuid = parent?.UUID
        if (!uuid) return null
        def normalizedUuid = uuid.toString()
        if (!normalizedUuid.contains('$')) {
            normalizedUuid = "ou\$${uuid}"
        }
        return normalizedUuid
    } catch (Exception e) {
        say('e', "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞: ${e.message}")
        return null
    }
}

def alreadyAssignedTo = { obj, String field, String targetUuid ->
    // ... [–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]
}

def tryAssign = { obj, List fields, String targetUuid ->
    // ... [–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]
}

def tryCloseResolvedTask = { obj ->
    try {
        def statusData = getStatusInfo(obj)
        def statusCode = statusData[0]
        def statusTitle = statusData[1]
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (statusCode != 'resolved' && !statusTitle.contains('—Ä–∞–∑—Ä–µ—à–µ–Ω') && !statusTitle.contains('—Ä–∞–∑—Ä–µ—à—ë')) {
            return false
        }
        if (DRY_RUN) {
            say('i', "  DRY: —Å—Ç–∞—Ç—É—Å ‚Üí closed")
            return true
        } else {
            inTx { utils.edit(obj, [status: [code: 'closed']]) }
            say('i', "  ‚úì —Å—Ç–∞—Ç—É—Å ‚Üí closed")
            return true
        }
    } catch (Exception e) {
        say('d', "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏: ${e.message}")
        return false
    }
}

// –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∏ —Ç.–¥.)
List<String> REL_ATTRS = [
    'responsibleEmployee', 'executor', 'assignee', 'author',
    'clientEmployee', 'initiator', 'manager', 'observer'
]

def findAllRelatedObjects = { emp ->
    def relatedObjects = []
    def seenUuids = new HashSet()
    CLASSES.each { cls ->
        REL_ATTRS.each { attr ->
            try {
                def objs = utils.find(cls, [(attr): emp])
                objs?.each { obj ->
                    if (obj?.UUID && seenUuids.add(obj.UUID)) {
                        relatedObjects.add(obj)
                    }
                }
            } catch (Exception e) { }
        }
    }
    return relatedObjects
}

def updateLicense = { emp ->
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ (–ø–æ –ª—é–±—ã–º —Ä–æ–ª—è–º)
        def hasOpenTasks = false
        def allTasks = findAllRelatedObjects(emp)
        allTasks.each { obj ->
            def statusData = getStatusInfo(obj)
            def code = statusData[0]
            def title = statusData[1]
            // –ï—Å–ª–∏ –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ 'closed' –∏ –Ω–µ 'resolved' (–∏–ª–∏ –∏—Ö –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏) ‚Äì –∑–∞–¥–∞—á–∞ –æ—Ç–∫—Ä—ã—Ç–∞
            if (!('closed' == code ||
                  'resolved' == code ||
                  title.contains('—Ä–∞–∑—Ä–µ—à—ë–Ω') ||
                  title.contains('—Ä–∞–∑—Ä–µ—à–µ–Ω–æ') ||
                  title.contains('–∑–∞–∫—Ä—ã—Ç'))) {
                hasOpenTasks = true
            }
        }
        if (hasOpenTasks) {
            say('w', "  ‚ö†Ô∏è –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞: —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏")
            return false
        }
        // –ú–µ–Ω—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ notLicensed
        if (DRY_RUN) {
            say('i', "  DRY: license ‚Üí notLicensed")
            return true
        } else {
            inTx { utils.edit(emp, [license: 'notLicensed']) }
            say('i', "  ‚úì –õ–∏—Ü–µ–Ω–∑–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ notLicensed")
            return true
        }
    } catch (Exception e) {
        say('w', "  –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ª–∏—Ü–µ–Ω–∑–∏–∏: ${e.message}")
        return false
    }
}

def archiveEmployee = { emp ->
    try {
        if (!emp) return false
        say('i', "  üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...")
        if (DRY_RUN) {
            say('i', "    DRY: removed = true")
            return true
        } else {
            inTx { utils.edit(emp, [removed: true]) }
            say('i', "    ‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ removed = true")
            return true
        }
    } catch (Exception e) {
        say('e', "  –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: ${e.message}")
        return false
    }
}

/* ‚ïê‚ïê‚ïê‚ïê‚ïê –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° ‚ïê‚ïê‚ïê‚ïê‚ïê */
try {
    // ... [–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –≤–≤–æ–¥–Ω—ã–µ –ª–æ–≥–∏]
    def fioList = buildFioList(CSV_TEXT)
    // ...
    fioList.each { String fio ->
        // ...
        def emp = findEmployeeByFio(fio)
        // ...
        def departmentUuid = getEmployeeDepartment(emp)
        // ...
        // –ü–û–ò–°–ö –ò –ü–ï–†–ï–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ó–ê–î–ê–ß
        def relatedObjects = findAllRelatedObjects(emp)
        say('i', "üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á (–Ω–∞–π–¥–µ–Ω–æ ${relatedObjects.size()}):")
        int empTaskCount = 0
        relatedObjects.each { obj ->
            if (tasksReassigned >= MAX_TOTAL_EDITS || empTaskCount >= MAX_EDITS_PER_EMPLOYEE) return
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                def statusData = getStatusInfo(obj)
                def code = statusData[0]
                def title = statusData[1]
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
                if (SKIP_STATUS_CODES.contains(code) ||
                    SKIP_STATUS_TITLES.any { title.contains(it) }) {
                    return
                }
                say('i', "  üìå ${obj.UUID} (—Å—Ç–∞—Ç—É—Å: ${code})")
                def result = tryAssign(obj, ['responsible'], departmentUuid)
                if (result == 'assigned') {
                    empTaskCount++
                    tasksReassigned++
                }
                sleepIfNeeded()
            } catch (Exception e) {
                say('e', "  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏: ${e.message}")
            }
        }
        say('i', "  ‚úì –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ: ${empTaskCount}")
        
        // –ó–ê–ö–†–´–¢–ò–ï –ó–ê–î–ê–ß
        say('i', "")
        say('i', "üîö –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á (—Ä–∞–∑—Ä–µ—à–µ–Ω ‚Üí –∑–∞–∫—Ä—ã—Ç):")
        def tasksToClose = findAllRelatedObjects(emp)
        int closedCount = 0
        tasksToClose.each { obj ->
            def statusData = getStatusInfo(obj)
            def code = statusData[0]
            def title = statusData[1]
            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "resolved" (—Ä–∞–∑—Ä–µ—à–µ–Ω), –ø—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å
            if (code == 'resolved' || title.contains('—Ä–∞–∑—Ä–µ—à–µ–Ω') || title.contains('—Ä–∞–∑—Ä–µ—à—ë')) {
                say('i', "  üìå ${obj.UUID}")
                if (tryCloseResolvedTask(obj)) {
                    closedCount++
                    tasksClosed++
                }
                sleepIfNeeded()
            }
        }
        say('i', "  ‚úì –ó–∞–∫—Ä—ã—Ç–æ: ${closedCount}")
        
        // –°–ú–ï–ù–ê –õ–ò–¶–ï–ù–ó–ò–ò
        say('i', "")
        say('i', "üîë –°–º–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏:")
        if (updateLicense(emp)) {
            licensesChanged++
            details.add("‚úÖ ${emp.title}: –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ ${empTaskCount}, –∑–∞–∫—Ä—ã—Ç–æ ${closedCount}, –ª–∏—Ü–µ–Ω–∑–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞")
        } else {
            details.add("‚ö†Ô∏è ${emp.title}: –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ ${empTaskCount}, –∑–∞–∫—Ä—ã—Ç–æ ${closedCount}, –ª–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞")
        }
        
        // –ê–†–•–ò–í–ò–†–û–í–ê–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê
        say('i', "")
        say('i', "üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
        if (archiveEmployee(emp)) {
            archived++
            say('i', "  ‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–π")
        } else {
            say('w', "  ‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω (–Ω–æ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)")
        }
        sleepIfNeeded()
    }
    // ... [–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç]
} catch (Exception e) {
    // ... [–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫]
}