/* === УСИЛЕННЫЙ ПОИСК СОТРУДНИКА ПО ФИО (LFM: Фамилия Имя Отчество) === */
def findEmployeeByFio = { String fioInput ->
  try {
    def fio = normFio(fioInput)
    if (!fio) return null

    // 1) быстрые пути по title
    def byTitleExact = utils.find('employee', [title: fio], sp.ignoreCase())
    if (byTitleExact?.size() == 1) return toObj(byTitleExact[0])

    def byTitleLike  = utils.find('employee', [title: op.like('%' + fio + '%')], sp.ignoreCase())
    if (byTitleLike?.size() == 1)  return toObj(byTitleLike[0])

    // 2) разбор на части (LFM: Фамилия, Имя, [Отчество])
    def p = fio.tokenize(' ')
    String last   = p.size() >= 1 ? p[0] : null
    String first  = p.size() >= 2 ? p[1] : null
    String middle = p.size() >= 3 ? p[2] : null
    if (!last || !first) {
      sayDbg("Недостаточно частей для ФИО (ожидаю Фамилия Имя [Отчество]): '${fio}'")
      return null
    }

    // 3) по трём полям LIKE (вайлдкарды + игнор регистра)
    List found = []
    if (middle) {
      found = utils.find('employee',
        [lastName:   op.like('%' + last   + '%'),
         firstName:  op.like('%' + first  + '%'),
         middleName: op.like('%' + middle + '%')],
        sp.ignoreCase())
      if (found?.size() == 1) return toObj(found[0])
    }

    // 4) по двум полям (без отчества) — частый кейс
    found = utils.find('employee',
      [lastName:  op.like('%' + last  + '%'),
       firstName: op.like('%' + first + '%')],
      sp.ignoreCase())
    if (found?.size() == 1) return toObj(found[0])

    // 5) если кандидатов несколько — точное совпадение по title (после нормализации)
    List objs = toObjList(found)
    def exactTitle = objs.find { normFio(it?.title ?: '')?.equalsIgnoreCase(fio) }
    if (exactTitle) return exactTitle

    // 6) широкий поиск по фамилии + фильтр именем/отчеством
    def byLastOnly = utils.find('employee', [lastName: op.like('%' + last + '%')], sp.ignoreCase())
    List wides = toObjList(byLastOnly).findAll { e ->
      def t = normFio(e?.title ?: '')
      t.toLowerCase().contains(first.toLowerCase()) &&
      (!middle || t.toLowerCase().contains(middle.toLowerCase()))
    }
    if (wides?.size() == 1) return wides[0]

    // 7) диагностика кандидатов (в отчёт)
    if (ENABLE_DEBUG_FIND) {
      def cand = (objs ?: toObjList(byTitleLike ?: byLastOnly)).take(10)
      if (cand) sayDbg("Кандидаты для '${fio}': " + cand.collect { it?.title ?: it }.join(' | '))
      else      sayDbg("Кандидатов не найдено для '${fio}'")
    }
    return null
  } catch (Throwable t) {
    if (ENABLE_DEBUG_FIND) sayDbg("Ошибка поиска '${fioInput}': ${t.message}")
    return null
  }
}